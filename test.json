{"meta":{"generator":"0.9.0","format":20,"date":1582660456244},"custom":null,"classes":[{"name":"BotListSpace","description":"Represents the botlist.space's service","see":["https://docs.botlist.space/"],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service","meta":{"line":11,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":18,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":26,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":34,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotUptime","description":"Gets the uptime of a bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":45,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":53,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":61,"file":"BotListSpace.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"BotsForDiscord","description":"Represents the Bots For Discord service","see":["https://docs.botsfordiscord.com/"],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":21,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the votes for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":29,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":37,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's list of managed bots","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":45,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"BotsOnDiscord","description":"Represents the Bots On Discord service","see":["https://bots.ondiscord.xyz/info/api"],"meta":{"line":7,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"DiscordAppsDev","description":"Represents the discordapps.dev's service","see":["https://discordapps.dev/en-GB/posts/docs/api-v2/"],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":11,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getApps","description":"Gets a list of applications on this service","meta":{"line":18,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getRPCApps","description":"Gets a list of RPC applications on this service","meta":{"line":25,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":33,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"DiscordBoats","description":"Represents the discord.boats's service","see":["https://discord.boats/api/docs"],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":20,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Whether or not a user has voted for a bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"userID","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":29,"file":"DiscordBoats.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"DiscordBotList","description":"Represents the Discord Bot List service","see":["https://discordbotlist.com/api-docs"],"methods":[{"name":"getBotWidget","description":"Gets the widget for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"DiscordBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"DiscordBotsGG","description":"Represents the bots.discord.pw service","see":["https://discord.bots.gg/docs"],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":23,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"DiscordBotWorld","description":"Represents the discordbot.world's service","see":["https://discordbot.world/docs"],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":11,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":19,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":27,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotLikes","description":"Gets the list of people who liked this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":35,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":46,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"DivineDiscordBots","description":"Represents the divinediscordbots.com's service","see":["https://divinediscordbots.com/api"],"methods":[{"name":"getBotStats","description":"Gets the bot stats for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the bot votes for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":20,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"GlennBotList","description":"Represents the Glenn Bot List service","see":["https://docs.glennbotlist.xyz/"],"meta":{"line":7,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"TopGG","description":"Represents the top.gg (formerly discordbots.org) service","see":["https://top.gg/api/docs"],"methods":[{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":12,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets the list of bots listed for this service","meta":{"line":19,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":27,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats listed on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":35,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":44,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotEmbed","description":"Gets the embed picture for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":53,"file":"TopGG.js","path":"src/Interface/Lists"}}],"meta":{"line":7,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"Poster","description":"A class that posts server count to listing site(s).","construct":{"name":"Poster","params":[{"name":"options","description":"The options needed to construct the poster.","type":[[["PosterOptions"]]]}]},"methods":[{"name":"getServerCount","description":"Retrieves the current server count of the client/shard","returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"Amount of servers the client/shard is in"},"meta":{"line":27,"file":"Poster.js","path":"src/Interface"}},{"name":"getUserCount","description":"Retrieves the current user count of the client/shard","returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"Amount of users the client/shard is connected with"},"meta":{"line":38,"file":"Poster.js","path":"src/Interface"}},{"name":"getVoiceConnections","description":"Retrieves the current voice connection count of the client/shard","returns":{"types":[[["Promise","<"],["Number",">"]]],"description":"Number of active voice connections"},"meta":{"line":49,"file":"Poster.js","path":"src/Interface"}},{"name":"startInterval","description":"Creates an interval that posts to all services","params":[{"name":"interval","description":"The time (in ms) to reach to post to all {@link Service}s again.","default":1800000,"type":[[["number"]]]}],"returns":{"types":[[["Interval"]]],"description":"The interval that is responsible for posting"},"meta":{"line":61,"file":"Poster.js","path":"src/Interface"}},{"name":"stopInterval","description":"Destroys the current interval","meta":{"line":73,"file":"Poster.js","path":"src/Interface"}},{"name":"post","description":"Posts the current clients server count to a service","see":["DBotsPoster#postManual"],"meta":{"line":81,"file":"Poster.js","path":"src/Interface"}},{"name":"postManual","description":"Manually posts a server count to a service","params":[{"name":"serverCount","description":"The server count to post to the service","type":[[["Number"]]]},{"name":"service","description":"The service to post to","default":"all","type":[[["Service"]]]},{"name":"userCount","description":"The server count to post to the service","optional":true,"type":[[["Number"]]]},{"name":"voiceConnections","description":"The voice connection count to post to the service","optional":true,"type":[[["Number"]]]}],"returns":{"types":[[["Promise","<("],["Object","|"],["Array","<"],["Object",">)>"]]],"description":"The result(s) of the post"},"meta":{"line":100,"file":"Poster.js","path":"src/Interface"}},{"name":"addHandler","description":"Adds an handler for an event","params":[{"name":"event","description":"The name of the event to add the handler to","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":130,"file":"Poster.js","path":"src/Interface"}},{"name":"removeHandler","description":"Removes an handler for an event","params":[{"name":"event","description":"The name of the event to remove the handler from","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":142,"file":"Poster.js","path":"src/Interface"}},{"name":"runHandlers","description":"Manually triggers an event with custom arguments","params":[{"name":"event","description":"The name of the event to run the handlers for","type":[[["CustomEvent"]]]},{"name":"args","description":"The arguments to pass to the handlers","variable":true,"type":[[["any"]]]}],"meta":{"line":155,"file":"Poster.js","path":"src/Interface"}}],"events":[{"name":"autopost","description":"Emitted when the interval has ran.","params":[{"name":"result","description":"The result(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":194,"file":"Constants.js","path":"src/Utils"}},{"name":"autopostfail","description":"Emitted when the interval failed to post.","params":[{"name":"result","description":"The error(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":199,"file":"Constants.js","path":"src/Utils"}},{"name":"post","description":"Emitted when a post succeeds.","params":[{"name":"result","description":"The result of the post","type":[[["Object"]]]}],"meta":{"line":204,"file":"Constants.js","path":"src/Utils"}},{"name":"postfail","description":"Emitted when a post fails.","params":[{"name":"result","description":"The error of the post","type":[[["Object"]]]}],"meta":{"line":209,"file":"Constants.js","path":"src/Utils"}}],"meta":{"line":11,"file":"Poster.js","path":"src/Interface"}},{"name":"ServiceBase","description":"Represents a service","construct":{"name":"ServiceBase","params":[{"name":"token","description":"The token/key for the service","type":[[["String"]]]}]},"meta":{"line":9,"file":"ServiceBase.js","path":"src/Interface"}}],"interfaces":[],"typedefs":[{"name":"PosterOptions","description":"Options for a poster.","type":[[["Object"]]],"props":[{"name":"apiKeys","description":"An object that pairs a {@link Service} with their token.","optional":true,"type":[[["Object"]]]},{"name":"client","description":"The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present.","optional":true,"type":[[["Object"]]]},{"name":"clientID","description":"The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present.","optional":true,"type":[[["string"]]]},{"name":"clientLibrary","description":"The library that the client is based on.","optional":true,"type":[[["Library"]]]},{"name":"post","description":"The function to use when posting to a server that uses the client ID,\nthe amount of servers, and a {@link Shard}. This will be used when the {@link Service} is `custom`.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"shard","description":"The shard data for using different methods of posting to services.","optional":true,"type":[[["Shard"]]]},{"name":"serverCount","description":"The function to use when retrieving the amount of servers a client/shard is in.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"userCount","description":"The function to use when retrieving the amount of users a client/shard is connected with.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"voiceConnections","description":"The function to use when retrieving the number of active voice connections.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"useSharding","description":"Whether or not to use a {@link Service}s sharding method when posting.","optional":true,"default":true,"type":[[["number"]]]}],"meta":{"line":1,"file":"Constants.js","path":"src/Utils"}},{"name":"Shard","description":"A shard that is used when posting to services.","type":[[["Object"]]],"props":[{"name":"count","description":"The amount of shards the client uses","optional":true,"type":[[["number"]]]},{"name":"id","description":"The shard ID that is being used by the poster","optional":true,"type":[[["number"]]]}],"meta":{"line":22,"file":"Constants.js","path":"src/Utils"}},{"name":"Service","description":"A service supported by the package. Here are the available services:\n* discordbotsgg\n* discordbotsorg (deprecated)\n* topgg\n* botsfordiscord\n* botsondiscord\n* discordappsdev\n* carbon\n* discordbotlist\n* divinediscordbots\n* discordboats\n* botlistspace\n* discordbotworld\n* glennbotlist","type":[[["string"]]],"meta":{"line":132,"file":"Constants.js","path":"src/Utils"}},{"name":"Library","description":"A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris","type":[[["string"]]],"meta":{"line":166,"file":"Constants.js","path":"src/Utils"}},{"name":"CustomEvent","description":"An event that can be added an handler for. These are the available events:\n* autopost","type":[[["string"]]],"meta":{"line":189,"file":"Constants.js","path":"src/Utils"}},{"name":"PromiseResolvable","description":"Data that can be resolved to give a string. This can either be a Function or a Promise","type":[[["function"]],[["Promise"]]],"meta":{"line":1,"file":"EnsurePromise.js","path":"src/Utils"}}],"externals":[]}