{"meta":{"generator":"0.9.0","format":20,"date":1583434472622},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <img src=\"/static/logo.png\" alt=\"dbots logo\" width=\"200\" align=\"left\" />\n  </p>\n  <h1>dbots</h1>\n  <p>The universal count poster</p>\n  <p>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/v/dbots.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/dt/dbots.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/snazzah/dbots.js\"><img src=\"https://img.shields.io/david/snazzah/dbots.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/dbots/\"><img src=\"https://nodei.co/npm/dbots.png\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n## Example\n```js\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    }\n});\n\nposter.post('carbon') // if the service is undefined, it posts to all services provided with a key\n```\n\n## Example with a client\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    client, // Client MUST be logged in to be put into a poster\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    },\n    clientLibrary: 'discord.js'\n});\n\nposter.startInterval(); // starts an interval thats posts to all services every 30 minutes\n```\n\n## Supporting Libraries\nCreator     | Name\n----------- | -----\nhydrabolt   | [![npm](/static/npm.png)](https://npmjs.com/discord.js) [![GitHub](/static/github.png)](https://github.com/hydrabolt/discord.js) discord.js\nizy521      | [![npm](/static/npm.png)](https://npmjs.com/discord.io) [![GitHub](/static/github.png)](https://github.com/izy521/discord.io) discord.io\nqeled       | [![npm](/static/npm.png)](https://npmjs.com/discordie) [![GitHub](/static/github.png)](https://github.com/qeled/discordie) discordie\nabalabahaha | [![npm](/static/npm.png)](https://npmjs.com/eris) [![GitHub](/static/github.png)](https://github.com/abalabahaha/eris) eris\n\n## Supporting Services\n - [top.gg (formerly discordbots.org)  `topgg` or `discordbotsorg`](https://top.gg)*\n - [discord.bots.gg `discordbotsgg`](https://discord.bots.gg)\n - [discordapps.dev `discordappsdev`](https://discordapps.dev)\n - [carbonitex.net `carbon`](http://carbonitex.net/discord/bots)\n - [botsfordiscord.com `botsfordiscord`](http://botsfordiscord.com)\n - [bots.ondiscord.xyz `botsondiscord`](http://bots.ondiscord.xyz)\n - [discordbotlist.com `discordbotlist`](https://discordbotlist.com)\n - [divinediscordbots.com `divinediscordbots`](https://divinediscordbots.com)\n - [discord.boats `discordboats`](https://discord.boats)\n - [botlist.space `botlistspace`](https://botlist.space)\n - [discordbot.world `discordbotworld`](https://discordbot.world)\n - [glennbotlist.xyz `glennbotlist`](https://glennbotlist.xyz)\n\n\\* discordbots.org is currently rebranding to top.gg: they will gradually make changes to add new functionalities, you can find more info [here](https://medium.com/discord-bots/announcing-top-gg-the-next-phase-of-discord-bots-2ac3eb3b81bd).  \nTo ensure backwards compatibility we will keep the `discordbotsorg` service active, but only as a reference to `topgg`, keeping it in a \"deprecated\" state; when the rebranding will be completed, we'll publish a major version update deleting any remains of the old name. If you're reading this, please switch to the classes of the new service ;)\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"ClientFiller","description":"A class that gets certain values from a client","access":"private","construct":{"name":"ClientFiller","params":[{"name":"client","description":"The client that will be used","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":7,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"Discordie","description":"Represents the client filter for discordie clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"Discordie.js","path":"src/Interface/Clients"}},{"name":"DiscordIO","description":"Represents the client filter for discord.io clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"DiscordIO.js","path":"src/Interface/Clients"}},{"name":"DiscordJS","description":"Represents the client filter for discord.js clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"DiscordJS.js","path":"src/Interface/Clients"}},{"name":"Eris","description":"Represents the client filter for Eris clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"shard","description":"This client does not natively support sharding.","readonly":true,"type":[[["null"]]],"meta":{"line":17,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":72,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":81,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"BotListSpace","description":"Represents the botlist.space's service","see":["https://docs.botlist.space/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotListSpace","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service","meta":{"line":15,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":22,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":30,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":38,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotUptime","description":"Gets the uptime of a bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":49,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":57,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":65,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"BotsForDiscord","description":"Represents the Bots For Discord service","see":["https://docs.botsfordiscord.com/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsForDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":25,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the votes for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":33,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":41,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's list of managed bots","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":49,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"BotsOnDiscord","description":"Represents the Bots On Discord service","see":["https://bots.ondiscord.xyz/info/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsOnDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"DiscordAppsDev","description":"Represents the discordapps.dev's service","see":["https://discordapps.dev/en-GB/posts/docs/api-v2/"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordAppsDev","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":15,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getApps","description":"Gets a list of applications on this service","meta":{"line":22,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getRPCApps","description":"Gets a list of RPC applications on this service","meta":{"line":29,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":37,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"DiscordBoats","description":"Represents the discord.boats's service","see":["https://discord.boats/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBoats","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":24,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Whether or not a user has voted for a bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"userID","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":33,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"DiscordBotList","description":"Represents the Discord Bot List service","see":["https://discordbotlist.com/api-docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBotWidget","description":"Gets the widget for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"DiscordBotsGG","description":"Represents the bots.discord.pw service","see":["https://discord.bots.gg/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotsGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":27,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"DiscordBotWorld","description":"Represents the discordbot.world's service","see":["https://discordbot.world/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotWorld","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","meta":{"line":15,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":23,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":31,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotLikes","description":"Gets the list of people who liked this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":39,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":50,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"DivineDiscordBots","description":"Represents the divinediscordbots.com's service","see":["https://divinediscordbots.com/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"DivineDiscordBots","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBotStats","description":"Gets the bot stats for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the bot votes for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":24,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"GlennBotList","description":"Represents the Glenn Bot List service","see":["https://docs.glennbotlist.xyz/"],"extends":[[["ServiceBase"]]],"construct":{"name":"GlennBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"TopGG","description":"Represents the top.gg (formerly discordbots.org) service","see":["https://top.gg/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"TopGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"meta":{"line":16,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets the list of bots listed for this service","meta":{"line":23,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":31,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats listed on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"meta":{"line":39,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":48,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotEmbed","description":"Gets the embed picture for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"meta":{"line":57,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":11,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"Poster","description":"A class that posts server count to listing site(s).","construct":{"name":"Poster","params":[{"name":"options","description":"The options needed to construct the poster.","type":[[["PosterOptions"]]]}]},"props":[{"name":"client","description":"The client that will be used to fecth the stats.","type":[[["Object"]]],"meta":{"line":20,"file":"Poster.js","path":"src/Interface"}},{"name":"options","description":"The options the poster was built with.","readonly":true,"type":[[["PosterOptions"]]],"meta":{"line":28,"file":"Poster.js","path":"src/Interface"}},{"name":"handlers","description":"The list of event handlers for every custom event.","type":[[["Object","<"],["CustomEvent",", "],["Array","<"],["PromiseResolvable",">>"]]],"meta":{"line":43,"file":"Poster.js","path":"src/Interface"}},{"name":"clientFiller","description":"The client filler used in the poster","access":"private","nullable":true,"type":[[["ClientFiller"]]],"meta":{"line":53,"file":"Poster.js","path":"src/Interface"}}],"methods":[{"name":"getServerCount","description":"Retrieves the current server count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of servers the client/shard is in"},"meta":{"line":62,"file":"Poster.js","path":"src/Interface"}},{"name":"getUserCount","description":"Retrieves the current user count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of users the client/shard is connected with"},"meta":{"line":74,"file":"Poster.js","path":"src/Interface"}},{"name":"getVoiceConnections","description":"Retrieves the current voice connection count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Number of active voice connections"},"meta":{"line":86,"file":"Poster.js","path":"src/Interface"}},{"name":"startInterval","description":"Creates an interval that posts to all services","params":[{"name":"interval","description":"The time (in ms) to reach to post to all {@link Service}s again.","default":1800000,"type":[[["number"]]]}],"returns":{"types":[[["Interval"]]],"description":"The interval that is responsible for posting"},"meta":{"line":99,"file":"Poster.js","path":"src/Interface"}},{"name":"stopInterval","description":"Destroys the current interval","meta":{"line":111,"file":"Poster.js","path":"src/Interface"}},{"name":"post","description":"Posts the current clients server count to a service","see":["Poster#postManual"],"meta":{"line":119,"file":"Poster.js","path":"src/Interface"}},{"name":"postManual","description":"Manually posts a server count to a service","params":[{"name":"serverCount","description":"The server count to post to the service","type":[[["number"]]]},{"name":"service","description":"The service to post to","default":"all","type":[[["Service"]]]},{"name":"userCount","description":"The server count to post to the service","optional":true,"type":[[["number"]]]},{"name":"voiceConnections","description":"The voice connection count to post to the service","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<("],["Object","|"],["Array","<"],["Object",">)>"]]],"description":"The result(s) of the post"},"meta":{"line":138,"file":"Poster.js","path":"src/Interface"}},{"name":"addHandler","description":"Adds an handler for an event","params":[{"name":"event","description":"The name of the event to add the handler to","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":170,"file":"Poster.js","path":"src/Interface"}},{"name":"removeHandler","description":"Removes an handler for an event","params":[{"name":"event","description":"The name of the event to remove the handler from","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":184,"file":"Poster.js","path":"src/Interface"}},{"name":"runHandlers","description":"Manually triggers an event with custom arguments","params":[{"name":"event","description":"The name of the event to run the handlers for","type":[[["CustomEvent"]]]},{"name":"args","description":"The arguments to pass to the handlers","variable":true,"type":[[["any"]]]}],"meta":{"line":199,"file":"Poster.js","path":"src/Interface"}}],"events":[{"name":"autopost","description":"Emitted when the interval has ran.","params":[{"name":"result","description":"The result(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":187,"file":"Constants.js","path":"src/Utils"}},{"name":"autopostfail","description":"Emitted when the interval failed to post.","params":[{"name":"result","description":"The error(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":192,"file":"Constants.js","path":"src/Utils"}},{"name":"post","description":"Emitted when a post succeeds.","params":[{"name":"result","description":"The result of the post","type":[[["Object"]]]}],"meta":{"line":197,"file":"Constants.js","path":"src/Utils"}},{"name":"postfail","description":"Emitted when a post fails.","params":[{"name":"result","description":"The error of the post","type":[[["Object"]]]}],"meta":{"line":202,"file":"Constants.js","path":"src/Utils"}}],"meta":{"line":12,"file":"Poster.js","path":"src/Interface"}},{"name":"ServiceBase","description":"Represents a service","construct":{"name":"ServiceBase","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface","access":"private","params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]}],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":9,"file":"ServiceBase.js","path":"src/Interface"}}],"interfaces":[],"typedefs":[{"name":"PosterOptions","description":"Options for a poster.","type":[[["Object"]]],"props":[{"name":"apiKeys","description":"An object that pairs a {@link Service} with their token.","optional":true,"type":[[["Object"]]]},{"name":"client","description":"The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present.","optional":true,"type":[[["Object"]]]},{"name":"clientID","description":"The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present.","optional":true,"type":[[["string"]]]},{"name":"clientLibrary","description":"The library that the client is based on.","optional":true,"type":[[["Library"]]]},{"name":"post","description":"The function to use when posting to a server that uses the client ID,\nthe amount of servers, and a {@link Shard}. This will be used when the {@link Service} is `custom`.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"shard","description":"The shard data for using different methods of posting to services.","optional":true,"type":[[["Shard"]]]},{"name":"serverCount","description":"The function to use when retrieving the amount of servers a client/shard is in.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"userCount","description":"The function to use when retrieving the amount of users a client/shard is connected with.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"voiceConnections","description":"The function to use when retrieving the number of active voice connections.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"useSharding","description":"Whether or not to use a {@link Service}s sharding method when posting.","optional":true,"default":true,"type":[[["number"]]]}],"meta":{"line":1,"file":"Constants.js","path":"src/Utils"}},{"name":"Shard","description":"A shard that is used when posting to services.","type":[[["Object"]]],"props":[{"name":"count","description":"The amount of shards the client uses","optional":true,"type":[[["number"]]]},{"name":"id","description":"The shard ID that is being used by the poster","optional":true,"type":[[["number"]]]}],"meta":{"line":22,"file":"Constants.js","path":"src/Utils"}},{"name":"Service","description":"A service supported by the package. Here are the available services:\n* discordbotsgg\n* discordbotsorg (deprecated)\n* topgg\n* botsfordiscord\n* botsondiscord\n* discordappsdev\n* carbon\n* discordbotlist\n* divinediscordbots\n* discordboats\n* botlistspace\n* discordbotworld\n* glennbotlist","type":[[["string"]]],"meta":{"line":136,"file":"Constants.js","path":"src/Utils"}},{"name":"Library","description":"A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris","type":[[["string"]]],"meta":{"line":170,"file":"Constants.js","path":"src/Utils"}},{"name":"CustomEvent","description":"An event that can be added an handler for. These are the available events:\n* autopost\n* autopostfail\n* post\n* postfail","type":[[["string"]]],"meta":{"line":179,"file":"Constants.js","path":"src/Utils"}},{"name":"PromiseResolvable","description":"Data that can be resolved to give a string. This can either be a Function or a Promise","type":[[["function"]],[["Promise"]]],"meta":{"line":1,"file":"EnsurePromise.js","path":"src/Utils"}}],"externals":[]}