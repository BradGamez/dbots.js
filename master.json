{"meta":{"generator":"0.9.0","format":20,"date":1583584926776},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <img src=\"static/logo.png\" alt=\"dbots logo\" width=\"200\" align=\"left\" />\n  </p>\n  <h1>dbots<i>.js</i></h1>\n  <p>A poster/wrapper for Discord bot lists</p>\n  <p>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/v/dbots.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/dt/dbots.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/dbots-pkg/dbots.js\"><img src=\"https://img.shields.io/david/dbots-pkg/dbots.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://github.com/dbots-pkg/dbots.js/actions\"><img src=\"https://github.com/dbots-pkg/dbots.js/workflows/Lint%20source%20code/badge.svg?branch=master\" alt=\"Linting state\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/dbots/\"><img src=\"https://nodei.co/npm/dbots.png\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Table of Contents\n- [About](#about)\n- [Installing](#installing)\n- [Examples](#examples)\n  - [Example with client](#example-with-client)\n  - [Example without client](#example-without-client)\n- [Supported Libraries](#supported-libraries)\n- [Supported Services](#supported-services)\n- [Other Links](#other-links)\n\n## About\n`dbots` helps [Discord](https://discordapp.com) bot developers group all your statistic posting needs into one poster, complete with seperate posting, API wrappers for supported lists, and an interval to post to all services every `n` seconds.\n\n## Installing\nYou can install dbots by running this command:\n```sh\n# Stable\nnpm i dbots\nyarn add dbots\n\n# Master\nnpm i dbots-pkg/dbots.js#master\nyarn add ssh://github.com/dbots-pkg/dbots.js#master\n```\n\n## Examples\n\n## Example with client\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    client,\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    },\n    clientLibrary: 'discord.js'\n});\n\nposter.startInterval(); // starts an interval thats posts to all services every 30 minutes\n```\n\n## Example without client\n```js\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    }\n});\n\nposter.post('carbon') // if the service is undefined, it posts to all services provided with a key\n```\n\n## Supported Libraries\nCreator     | Name\n----------- | -----\ndiscordjs (originally from hydrabolt)   | [![npm](static/npm.png)](https://npmjs.com/discord.js) [![GitHub](static/github.png)](https://github.com/discordjs/discord.js) discord.js\nizy521      | [![npm](static/npm.png)](https://npmjs.com/discord.io) [![GitHub](static/github.png)](https://github.com/izy521/discord.io) discord.io\nqeled       | [![npm](static/npm.png)](https://npmjs.com/discordie) [![GitHub](static/github.png)](https://github.com/qeled/discordie) discordie\nabalabahaha | [![npm](static/npm.png)](https://npmjs.com/eris) [![GitHub](static/github.png)](https://github.com/abalabahaha/eris) eris\n\n## Supported Services\n - [botlist.space `botlistspace`](https://botlist.space)\n - [botsfordiscord.com `botsfordiscord`](http://botsfordiscord.com)\n - [bots.ondiscord.xyz `botsondiscord`](http://bots.ondiscord.xyz)\n - [carbonitex.net `carbon`](http://carbonitex.net/discord/bots)\n - [discordapps.dev `discordappsdev`](https://discordapps.dev)\n - [discord.boats `discordboats`](https://discord.boats)\n - [discordbotlist.com `discordbotlist`](https://discordbotlist.com)\n - [discord.bots.gg `discordbotsgg`](https://discord.bots.gg)\n - [discordbot.world `discordbotworld`](https://discordbot.world)\n - [divinediscordbots.com `divinediscordbots`](https://divinediscordbots.com)\n - [glennbotlist.xyz `glennbotlist`](https://glennbotlist.xyz)\n - [top.gg `topgg`](https://top.gg)\n\n## Contribution\nAny contribution may be useful for the package! Make sure when making issues or PRs that the issue has not been addressed yet in a past issue/PR.\n\n## Other Links\n- [NPM](https://npmjs.org/package/dbots)\n- [Yarn](https://yarn.pm/dbots)\n- [JSDelivr](https://www.jsdelivr.com/package/npm/dbots)\n- [David (Dependency Watcher)](https://david-dm.org/dbots-pkg/dbots.js)\n- [Website](https://dbots.js.org) ([source](https://github.com/dbots-pkg/dbots-pkg.github.io))\n- [Documentation](https://dbots.js.org/#/docs)\n- [dbots GitHub Organization](https://github.com/dbots-pkg)\n","path":"docs/general/welcome.md"},"services":{"name":"Supported Services","type":"md","content":"# Supported Services\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=botlist.space\" alt=\"botlistspace logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botlistspace\"></i>\n  <i id=\"botlist.space\"></i>\n  <i id=\"bls\"></i>\n  <a href=\"https://botlist.space\"><h1>botlist.space</h1></a>\n\nKeys: `botlistspace`, `botlist.space`, `bls`  \nClass: [dbots.BotListSpace]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=botsfordiscord.com\" alt=\"botsfordiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsfordiscord\"></i>\n  <i id=\"botsfordiscord.com\"></i>\n  <i id=\"bfd\"></i>\n  <a href=\"https://botsfordiscord.com\"><h1>Bots For Discord</h1></a>\n\nKeys: `botsfordiscord`, `botsfordiscord.com`, `bfd`  \nClass: [dbots.BotsForDiscord]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=bots.ondiscord.xyz\" alt=\"botsondiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsondiscord\"></i>\n  <i id=\"bots.ondiscord.xyz\"></i>\n  <i id=\"bod\"></i>\n  <a href=\"https://bots.ondiscord.xyz\"><h1>Bots On Discord</h1></a>\n\nKeys: `botsondiscord`, `bots.ondiscord.xyz`, `bod`  \nClass: [dbots.BotsOnDiscord]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/7N8ywwr.png\" alt=\"carbonitex logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"carbonitex\"></i>\n  <i id=\"carbonitex.net\"></i>\n  <i id=\"carbon\"></i>\n  <a href=\"https://www.carbonitex.net\"><h1>Carbonitex</h1></a>\n\nKeys: `carbonitex`, `carbonitex.net`, `carbon`  \nClass: [dbots.Carbon]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://api.discordapps.dev/img/logo/logo128.png\" alt=\"discordappsdev logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordappsdev\"></i>\n  <i id=\"discordapps.dev\"></i>\n  <i id=\"discordapps\"></i>\n  <i id=\"dapps\"></i>\n  <a href=\"https://discordapps.dev\"><h1>Discord Apps</h1></a>\n\nKeys: `discordappsdev`, `discordapps.dev`, `discordapps`, `dapps`  \nClass: [dbots.DiscordAppsDev]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discord.boats\" alt=\"discordboats logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordboats\"></i>\n  <i id=\"discord.boats\"></i>\n  <i id=\"dboats\"></i>\n  <a href=\"https://discord.boats\"><h1>Discord Boats</h1></a>\n\nKeys: `discordboats`, `discord.boats`, `dboats`  \nClass: [dbots.DiscordBoats]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discordbotlist.com\" alt=\"discordbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotlist\"></i>\n  <i id=\"discordbotlist.com\"></i>\n  <i id=\"dbotlist\"></i>\n  <a href=\"https://discordbotlist.com\"><h1>Discord Bot List</h1></a>\n\nKeys: `discordbotlist`, `discordbotlist.com`, `dbotlist`  \nClass: [dbots.DiscordBotList]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discordbot.world\" alt=\"discordbotworld logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotworld\"></i>\n  <i id=\"discordbot.world\"></i>\n  <i id=\"dbotworld\"></i>\n  <i id=\"dbw\"></i>\n  <a href=\"https://discordbot.world\"><h1>Discord Bot World</h1></a>\n\nKeys: `discordbotworld`, `discordbot.world`, `dbotworld`, `dbw`  \nClass: [dbots.DiscordBotWorld]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discord.bots.gg\" alt=\"discordbotsgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotsgg\"></i>\n  <i id=\"discord.bots.gg\"></i>\n  <i id=\"botsgg\"></i>\n  <i id=\"bots.gg\"></i>\n  <i id=\"dbots\"></i>\n  <a href=\"https://discord.bots.gg\"><h1>Discord Bots</h1></a>\n\nKeys: `discordbotsgg`, `discord.bots.gg`, `botsgg`, `bots.gg`, `dbots`  \nClass: [dbots.DiscordBotsGG]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=divinediscordbots.com\" alt=\"divinediscordbots logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"divinediscordbots\"></i>\n  <i id=\"divinediscordbots.com\"></i>\n  <i id=\"divinedbots\"></i>\n  <i id=\"divine\"></i>\n  <i id=\"ddb\"></i>\n  <a href=\"https://divinediscordbots.com\"><h1>Divine Discord Bots</h1></a>\n\nKeys: `divinediscordbots`, `divinediscordbots.com`, `divinedbots`, `divine`, `ddb`  \nClass: [dbots.DivineDiscordBots]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/8HphUE7.jpg\" alt=\"glennbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"glennbotlist\"></i>\n  <i id=\"glennbotlist.xyz\"></i>\n  <i id=\"glennbotlist.gg\"></i>\n  <i id=\"glenn\"></i>\n  <a href=\"https://glennbotlist.xyz\"><h1>Glenn Bot List</h1></a>\n\nKeys: `glennbotlist`, `glennbotlist.xyz`, `glennbotlist.gg`, `glenn`  \nClass: [dbots.GlennBotList]()\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://top.gg/images/dblnew.png\" alt=\"topgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"topgg\"></i>\n  <i id=\"top.gg\"></i>\n  <i id=\"top\"></i>\n  <a href=\"https://top.gg\"><h1>Top.gg</h1></a>\n\nKeys: `topgg`, `top.gg`, `top`  \nClass: [dbots.TopGG]()\n</div>","path":"docs/general/services.md"}}}},"classes":[{"name":"ClientFiller","description":"A class that gets certain values from a client","access":"private","construct":{"name":"ClientFiller","params":[{"name":"client","description":"The client that will be used","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":82,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}}],"methods":[{"name":"get","description":"Gets a client filler from a library","scope":"static","params":[{"name":"libraryName","description":"The name of the library to get","type":[[["string"]]]},{"name":"client","description":"The client that the library made","type":[[["Object"]]]}],"returns":[[["ClientFiller"]]],"meta":{"line":21,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":7,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"Discordie","description":"Represents the client filler for discordie clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":82,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"Discordie.js","path":"src/Interface/Clients"}},{"name":"DiscordIO","description":"Represents the client filler for discord.io clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":82,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"DiscordIO.js","path":"src/Interface/Clients"}},{"name":"DiscordJS","description":"Represents the client filler for discord.js clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":82,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":8,"file":"DiscordJS.js","path":"src/Interface/Clients"}},{"name":"Eris","description":"Represents the client filler for Eris clients","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"shard","description":"This client does not natively support sharding.","readonly":true,"type":[[["null"]]],"meta":{"line":17,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"client","description":"The client that will be used for the filler","type":[[["Object"]]],"meta":{"line":12,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using","readonly":true,"type":[[["number"]]],"meta":{"line":82,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":91,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"BotListSpace","description":"Represents the botlist.space's service","see":["https://docs.botlist.space/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotListSpace","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service","returns":[[["Promise"]]],"meta":{"line":53,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","returns":[[["Promise"]]],"meta":{"line":61,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":70,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":79,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotUptime","description":"Gets the uptime of a bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":93,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":102,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":111,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"style","description":"The style of the widget","optional":true,"default":1,"type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":122,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"BotListSpace.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"BotsForDiscord","description":"Represents the Bots For Discord service","see":["https://docs.botsfordiscord.com/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsForDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":54,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the votes for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":63,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":72,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's list of managed bots","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":81,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":91,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"BotsOnDiscord","description":"Represents the Bots On Discord service","see":["https://bots.ondiscord.xyz/info/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsOnDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"checkReview","description":"Checks whether or not a user has reviewed a bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"userId","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":55,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":70,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"Carbon","description":"Represents the Carbonitex service","extends":[[["ServiceBase"]]],"construct":{"name":"Carbon","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","returns":[[["Promise"]]],"meta":{"line":51,"file":"Carbon.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request (this automatically determines what client its posting for)","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":39,"file":"Carbon.js","path":"src/Interface/Lists"}}],"meta":{"line":10,"file":"Carbon.js","path":"src/Interface/Lists"}},{"name":"DiscordAppsDev","description":"Represents the discordapps.dev's service","see":["https://discordapps.dev/en-GB/posts/docs/api-v2/"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordAppsDev","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","returns":[[["Promise"]]],"meta":{"line":53,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getApps","description":"Gets a list of applications on this service","returns":[[["Promise"]]],"meta":{"line":61,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getRPCApps","description":"Gets a list of RPC applications on this service","returns":[[["Promise"]]],"meta":{"line":69,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":78,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"DiscordBoats","description":"Represents the discord.boats's service","see":["https://discord.boats/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBoats","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":54,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":63,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Whether or not a user has voted for a bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"userID","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":73,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":86,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"DiscordBoats.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"DiscordBotList","description":"Represents the Discord Bot List service","see":["https://discordbotlist.com/api-docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":66,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]},{"name":"options.userCount","description":"The amount of users that the client cached","type":[[["number"]]]},{"name":"options.voiceConnections","description":"The amount of voice connections the client has","type":[[["number"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise"]]],"meta":{"line":43,"file":"DiscordBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"DiscordBotsGG","description":"Represents the bots.discord.pw service","see":["https://discord.bots.gg/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotsGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"sanitized","description":"Whether to sanitize descriptions","optional":true,"default":false,"type":[[["Boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":58,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service","params":[{"name":"query","description":"The query string object to append to the endpoint","nullable":true,"type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":73,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise"]]],"meta":{"line":41,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"DiscordBotWorld","description":"Represents the discordbot.world's service","see":["https://discordbot.world/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotWorld","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service","returns":[[["Promise"]]],"meta":{"line":53,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":62,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":71,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotLikes","description":"Gets the list of people who liked this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":80,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":94,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"DivineDiscordBots","description":"Represents the divinediscordbots.com's service","see":["https://divinediscordbots.com/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"DivineDiscordBots","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBotStats","description":"Gets the bot stats for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":54,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the bot votes for your bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":63,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":73,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"DivineDiscordBots.js","path":"src/Interface/Lists"}},{"name":"GlennBotList","description":"Represents the Glenn Bot List service","see":["https://docs.glennbotlist.xyz/"],"extends":[[["ServiceBase"]]],"construct":{"name":"GlennBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":54,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the bot's votes on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":63,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getProfile","description":"Get a user's profile listed on this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":74,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":84,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":40,"file":"GlennBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"TopGG","description":"Represents the top.gg (formerly discordbots.org) service","see":["https://top.gg/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"TopGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getUser","description":"Gets the user listed for this service","params":[{"name":"id","description":"The user's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":57,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets the list of bots listed for this service","returns":[[["Promise"]]],"meta":{"line":65,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed for this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":74,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats listed on this service","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":83,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the data on the voters for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":93,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotWidget","description":"Gets the widget URL for this bot","params":[{"name":"id","description":"The bot's ID.","type":[[["string"]]]},{"name":"query","description":"The querystring that will be used in the request","optional":true,"type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":103,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise"]]],"meta":{"line":41,"file":"TopGG.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"Poster","description":"A class that posts server count to listing site(s).","construct":{"name":"Poster","params":[{"name":"options","description":"The options needed to construct the poster.","type":[[["PosterOptions"]]]}]},"props":[{"name":"client","description":"The client that will be used to fecth the stats.","type":[[["Object"]]],"meta":{"line":20,"file":"Poster.js","path":"src/Interface"}},{"name":"options","description":"The options the poster was built with.","readonly":true,"type":[[["PosterOptions"]]],"meta":{"line":28,"file":"Poster.js","path":"src/Interface"}},{"name":"handlers","description":"The list of event handlers for every custom event.","type":[[["Object","<"],["CustomEvent",", "],["Array","<"],["PromiseResolvable",">>"]]],"meta":{"line":44,"file":"Poster.js","path":"src/Interface"}},{"name":"clientFiller","description":"The client filler used in the poster","access":"private","nullable":true,"type":[[["ClientFiller"]]],"meta":{"line":54,"file":"Poster.js","path":"src/Interface"}}],"methods":[{"name":"getServerCount","description":"Retrieves the current server count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of servers the client/shard is in"},"meta":{"line":63,"file":"Poster.js","path":"src/Interface"}},{"name":"getUserCount","description":"Retrieves the current user count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of users the client/shard is connected with"},"meta":{"line":77,"file":"Poster.js","path":"src/Interface"}},{"name":"getVoiceConnections","description":"Retrieves the current voice connection count of the client/shard","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Number of active voice connections"},"meta":{"line":91,"file":"Poster.js","path":"src/Interface"}},{"name":"startInterval","description":"Creates an interval that posts to all services","params":[{"name":"interval","description":"The time (in ms) to reach to post to all {@link Service}s again.","default":1800000,"type":[[["number"]]]}],"returns":{"types":[[["Interval"]]],"description":"The interval that is responsible for posting"},"meta":{"line":106,"file":"Poster.js","path":"src/Interface"}},{"name":"stopInterval","description":"Destroys the current interval","meta":{"line":118,"file":"Poster.js","path":"src/Interface"}},{"name":"post","description":"Posts the current clients server count to a service","see":["Poster#postManual"],"meta":{"line":126,"file":"Poster.js","path":"src/Interface"}},{"name":"postManual","description":"Manually posts a server count to a service","params":[{"name":"service","description":"The service to post to","default":"all","type":[[["Service"]]]},{"name":"counts","description":"An object containing the tallies of servers, users and voice connections","type":[[["Object"]]]},{"name":"counts.serverCount","description":"The server count to post to the service","type":[[["number"]]]},{"name":"counts.userCount","description":"The user count to post to the service","optional":true,"type":[[["number"]]]},{"name":"counts.voiceConnections","description":"The voice connection count to post to the service","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<("],["Object","|"],["Array","<"],["Object",">)>"]]],"description":"The result(s) of the post"},"meta":{"line":146,"file":"Poster.js","path":"src/Interface"}},{"name":"addHandler","description":"Adds an handler for an event","params":[{"name":"event","description":"The name of the event to add the handler to","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":185,"file":"Poster.js","path":"src/Interface"}},{"name":"removeHandler","description":"Removes an handler for an event","params":[{"name":"event","description":"The name of the event to remove the handler from","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["PromiseResolvable"]]]}],"returns":{"types":[[["Array","<"],["PromiseResolvable",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":199,"file":"Poster.js","path":"src/Interface"}},{"name":"runHandlers","description":"Manually triggers an event with custom arguments","params":[{"name":"event","description":"The name of the event to run the handlers for","type":[[["CustomEvent"]]]},{"name":"args","description":"The arguments to pass to the handlers","variable":true,"type":[[["any"]]]}],"meta":{"line":214,"file":"Poster.js","path":"src/Interface"}}],"events":[{"name":"autopost","description":"Emitted when the interval has ran.","params":[{"name":"result","description":"The result(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":64,"file":"Constants.js","path":"src/Utils"}},{"name":"autopostfail","description":"Emitted when the interval failed to post.","params":[{"name":"result","description":"The error(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":69,"file":"Constants.js","path":"src/Utils"}},{"name":"post","description":"Emitted when a post succeeds.","params":[{"name":"result","description":"The result of the post","type":[[["Object"]]]}],"meta":{"line":74,"file":"Constants.js","path":"src/Utils"}},{"name":"postfail","description":"Emitted when a post fails.","params":[{"name":"result","description":"The error of the post","type":[[["Object"]]]}],"meta":{"line":79,"file":"Constants.js","path":"src/Utils"}}],"meta":{"line":12,"file":"Poster.js","path":"src/Interface"}},{"name":"ServiceBase","description":"Represents a service","construct":{"name":"ServiceBase","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service","access":"private","type":[[["string"]]],"meta":{"line":16,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"baseURL","description":"The base URL of the service's API","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":24,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":170,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"logoURL","description":"The logo URL, used only for docs","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":180,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"name","description":"Service's name, used only for docs","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":190,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"websiteURL","description":"The website URL, used only for docs","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":200,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface","access":"private","params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"meta":{"line":143,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":159,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]}],"returns":{"types":[[["ServiceBase"]]],"nullable":true},"meta":{"line":33,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_post","description":"Posts statistics to this service\nInternally, this is supposed to be overridden in extended classes","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":127,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":10,"file":"ServiceBase.js","path":"src/Interface"}}],"interfaces":[],"typedefs":[{"name":"PosterOptions","description":"Options for a poster.","type":[[["Object"]]],"props":[{"name":"apiKeys","description":"An object that pairs a {@link Service} with their token.","optional":true,"type":[[["Object"]]]},{"name":"client","description":"The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present.","optional":true,"type":[[["Object"]]]},{"name":"clientID","description":"The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present.","optional":true,"type":[[["string"]]]},{"name":"clientLibrary","description":"The library that the client is based on.","optional":true,"type":[[["Library"]]]},{"name":"post","description":"The function to use when posting to a server that uses the client ID,\nthe amount of servers, and a {@link Shard}. This will be used when the {@link Service} is `custom`.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"shard","description":"The shard data for using different methods of posting to services.","optional":true,"type":[[["Shard"]]]},{"name":"serverCount","description":"The function to use when retrieving the amount of servers a client/shard is in.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"userCount","description":"The function to use when retrieving the amount of users a client/shard is connected with.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"voiceConnections","description":"The function to use when retrieving the number of active voice connections.\n ^ Uses the client as a parameter.","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"useSharding","description":"Whether or not to use a {@link Service}s sharding method when posting.","optional":true,"default":true,"type":[[["number"]]]}],"meta":{"line":1,"file":"Constants.js","path":"src/Utils"}},{"name":"Shard","description":"A shard that is used when posting to services.","type":[[["Object"]]],"props":[{"name":"count","description":"The amount of shards the client uses","optional":true,"type":[[["number"]]]},{"name":"id","description":"The shard ID that is being used by the poster","optional":true,"type":[[["number"]]]}],"meta":{"line":22,"file":"Constants.js","path":"src/Utils"}},{"name":"Service","description":"A service supported by the package. Here are the available services:\n* discordbotsgg\n* topgg\n* botsfordiscord\n* botsondiscord\n* discordappsdev\n* carbon\n* discordbotlist\n* divinediscordbots\n* discordboats\n* botlistspace\n* discordbotworld\n* glennbotlist","see":["{@link https://github.com/dbots-pkg/dbots.js/blob/master/src/Interface/ServiceBase.js#L30}"],"type":[[["string"]]],"meta":{"line":29,"file":"Constants.js","path":"src/Utils"}},{"name":"Library","description":"A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris","type":[[["string"]]],"meta":{"line":47,"file":"Constants.js","path":"src/Utils"}},{"name":"CustomEvent","description":"An event that can be added an handler for. These are the available events:\n* autopost\n* autopostfail\n* post\n* postfail","type":[[["string"]]],"meta":{"line":56,"file":"Constants.js","path":"src/Utils"}},{"name":"PromiseResolvable","description":"Data that can be resolved to give a string. This can either be a Function or a Promise","type":[[["function"]],[["Promise"]]],"meta":{"line":1,"file":"EnsurePromise.js","path":"src/Utils"}}],"externals":[]}