{"meta":{"generator":"0.9.0","format":20,"date":1588445289988},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <p>\n    <img src=\"static/logo.png\" alt=\"dbots.js logo\" width=\"200\" />\n  </p>\n  <p>A stats poster and API wrapper for all botlists.</p>\n  <p>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/v/dbots.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://github.com/dbots-pkg/dbots.js/network/dependents?package_id=UGFja2FnZS0zNzA1MzQ1MA%3D%3D\"><img src=\"https://api.snaz.in/badges/v1/github/used-by/dbots-pkg/dbots.js\" alt=\"GitHub repos used by\" /></a>\n    <a href=\"https://www.npmjs.com/package/dbots\"><img src=\"https://img.shields.io/npm/dt/dbots.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/dbots-pkg/dbots.js\"><img src=\"https://img.shields.io/david/dbots-pkg/dbots.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <br/>\n    <a href=\"https://github.com/dbots-pkg/dbots.js/actions?query=workflow%3A%22Source+code+linting%22\"><img src=\"https://github.com/dbots-pkg/dbots.js/workflows/Source%20code%20linting/badge.svg\" alt=\"Linting state\" /></a>\n    <a href=\"https://github.com/dbots-pkg/dbots.js/actions?query=workflow%3A%22TS+definitions%22\"><img src=\"https://github.com/dbots-pkg/dbots.js/workflows/TS%20definitions/badge.svg\" alt=\"Typings state\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/dbots/\"><img src=\"https://nodei.co/npm/dbots.png\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n<!-- omit in toc -->\n# Table of Contents\n- [About](#about)\n- [Installing](#installing)\n- [Examples](#examples)\n  - [Example with client](#example-with-client)\n  - [Example without client](#example-without-client)\n- [Supported Libraries](#supported-libraries)\n- [Supported Services](#supported-services)\n- [Contribution](#contribution)\n- [Other Links](#other-links)\n\n## About\n`dbots` helps [Discord](https://discordapp.com) bot developers group all your statistic posting needs into one poster, complete with seperate posting, API wrappers for supported lists, and an interval to post to all services every `n` seconds.\n\n## Installing\nYou can install dbots by running this command:\n```sh\n# Stable\nnpm i dbots\nyarn add dbots\n\n# Master\nnpm i dbots-pkg/dbots.js#master\nyarn add ssh://github.com/dbots-pkg/dbots.js#master\n```\n\n## Examples\n\n### Example with client\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    client,\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    },\n    clientLibrary: 'discord.js'\n});\n\nposter.startInterval(); // starts an interval thats posts to all services every 30 minutes\n```\n\n### Example without client\n```js\nconst dbots = require('dbots');\nconst poster = new dbots.Poster({\n    apiKeys: {\n        discordbotsgg: '…',\n        topgg: '…',\n        lsterminalink: '…',\n        carbon: '…'\n    }\n});\n\nposter.post('carbon') // if the service is undefined, it posts to all services provided with a key\n```\n\n## Supported Libraries\nCreator     | Name\n----------- | -----\ndiscordjs (originally from hydrabolt)   | [![npm](static/npm.png)](https://npmjs.com/discord.js) [![GitHub](static/github.png)](https://github.com/discordjs/discord.js) discord.js\nizy521      | [![npm](static/npm.png)](https://npmjs.com/discord.io) [![GitHub](static/github.png)](https://github.com/izy521/discord.io) discord.io\nqeled       | [![npm](static/npm.png)](https://npmjs.com/discordie) [![GitHub](static/github.png)](https://github.com/qeled/discordie) discordie\nabalabahaha | [![npm](static/npm.png)](https://npmjs.com/eris) [![GitHub](static/github.png)](https://github.com/abalabahaha/eris) eris\n\n## Supported Services\nThe supported services list has been moved into the website.  \nYou can see a full (and automatically updated) list of usables services [here](#/docs/main/master/general/services).\n\n## Contribution\nAny contribution may be useful for the package! Make sure when making issues or PRs that the issue has not been addressed yet in a past issue/PR.\n\n## Other Links\n- [NPM](https://npmjs.org/package/dbots)\n- [Yarn](https://yarn.pm/dbots)\n- [JSDelivr](https://www.jsdelivr.com/package/npm/dbots)\n- [David (Dependency Watcher)](https://david-dm.org/dbots-pkg/dbots.js)\n- [Website](https://dbots.js.org) ([source](https://github.com/dbots-pkg/dbots-pkg.github.io))\n- [Documentation](https://dbots.js.org/#/docs)\n- [dbots GitHub Organization](https://github.com/dbots-pkg)\n","path":"docs/general/welcome.md"},"services":{"name":"Supported Services","type":"md","content":"# Supported Services (21)\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=arcane-botcenter.xyz\" alt=\"arcanebotcenter logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"arcanebotcenter\"></i>\n  <i id=\"arcane-botcenter.xyz\"></i>\n  <i id=\"arcanebotcenter.xyz\"></i>\n  <i id=\"arcane\"></i>\n  <i id=\"abc\"></i>\n  <a href=\"https://arcane-botcenter.xyz\"><h1>Arcane Bot List</h1></a>\n\nKeys: `arcanebotcenter`, `arcane-botcenter.xyz`, `arcanebotcenter.xyz`, `arcane`, `abc`  \nClass: [dbots.Arcane](/#/docs/main/master/class/Arcane)  \nWebsite: https://arcane-botcenter.xyz\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=botlist.space\" alt=\"botlistspace logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botlistspace\"></i>\n  <i id=\"botlist.space\"></i>\n  <i id=\"bls\"></i>\n  <a href=\"https://botlist.space\"><h1>botlist.space</h1></a>\n\nKeys: `botlistspace`, `botlist.space`, `bls`  \nClass: [dbots.BotListSpace](/#/docs/main/master/class/BotListSpace)  \nWebsite: https://botlist.space\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=botsfordiscord.com\" alt=\"botsfordiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsfordiscord\"></i>\n  <i id=\"botsfordiscord.com\"></i>\n  <i id=\"bfd\"></i>\n  <a href=\"https://botsfordiscord.com\"><h1>Bots For Discord</h1></a>\n\nKeys: `botsfordiscord`, `botsfordiscord.com`, `bfd`  \nClass: [dbots.BotsForDiscord](/#/docs/main/master/class/BotsForDiscord)  \nWebsite: https://botsfordiscord.com\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=b-o-d.cf\" alt=\"botsofdiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsofdiscord\"></i>\n  <i id=\"b-o-d\"></i>\n  <i id=\"b-o-d.cf\"></i>\n  <a href=\"https://www.b-o-d.cf/\"><h1>Bots Of Discord</h1></a>\n\nKeys: `botsofdiscord`, `b-o-d`, `b-o-d.cf`  \nClass: [dbots.BotsOfDiscord](/#/docs/main/master/class/BotsOfDiscord)  \nWebsite: https://www.b-o-d.cf/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=bots.ondiscord.xyz\" alt=\"botsondiscord logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"botsondiscord\"></i>\n  <i id=\"bots.ondiscord.xyz\"></i>\n  <i id=\"bod\"></i>\n  <a href=\"https://bots.ondiscord.xyz\"><h1>Bots On Discord</h1></a>\n\nKeys: `botsondiscord`, `bots.ondiscord.xyz`, `bod`  \nClass: [dbots.BotsOnDiscord](/#/docs/main/master/class/BotsOnDiscord)  \nWebsite: https://bots.ondiscord.xyz\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/7N8ywwr.png\" alt=\"carbonitex logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"carbonitex\"></i>\n  <i id=\"carbonitex.net\"></i>\n  <i id=\"carbon\"></i>\n  <a href=\"https://www.carbonitex.net/Discord/bots\"><h1>Carbonitex</h1></a>\n\nKeys: `carbonitex`, `carbonitex.net`, `carbon`  \nClass: [dbots.Carbon](/#/docs/main/master/class/Carbon)  \nWebsite: https://www.carbonitex.net/Discord/bots\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=dblista.pl\" alt=\"dblistapl logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"dblistapl\"></i>\n  <i id=\"dblista.pl\"></i>\n  <i id=\"dblista\"></i>\n  <a href=\"https://dblista.pl\"><h1>DBLista</h1></a>\n\nKeys: `dblistapl`, `dblista.pl`, `dblista`  \nClass: [dbots.DBLista](/#/docs/main/master/class/DBLista)  \nWebsite: https://dblista.pl\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://api.discordapps.dev/img/logo/logo128.png\" alt=\"discordappsdev logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordappsdev\"></i>\n  <i id=\"discordapps.dev\"></i>\n  <i id=\"discordapps\"></i>\n  <i id=\"dapps\"></i>\n  <a href=\"https://discordapps.dev\"><h1>Discord Apps</h1></a>\n\nKeys: `discordappsdev`, `discordapps.dev`, `discordapps`, `dapps`  \nClass: [dbots.DiscordAppsDev](/#/docs/main/master/class/DiscordAppsDev)  \nWebsite: https://discordapps.dev\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discord.boats\" alt=\"discordboats logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordboats\"></i>\n  <i id=\"discord.boats\"></i>\n  <i id=\"dboats\"></i>\n  <a href=\"https://discord.boats\"><h1>Discord Boats</h1></a>\n\nKeys: `discordboats`, `discord.boats`, `dboats`  \nClass: [dbots.DiscordBoats](/#/docs/main/master/class/DiscordBoats)  \nWebsite: https://discord.boats\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discordbotlist.com\" alt=\"discordbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotlist\"></i>\n  <i id=\"discordbotlist.com\"></i>\n  <i id=\"dbotlist\"></i>\n  <a href=\"https://discordbotlist.com\"><h1>Discord Bot List</h1></a>\n\nKeys: `discordbotlist`, `discordbotlist.com`, `dbotlist`  \nClass: [dbots.DiscordBotList](/#/docs/main/master/class/DiscordBotList)  \nWebsite: https://discordbotlist.com\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discordbot.world\" alt=\"discordbotworld logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotworld\"></i>\n  <i id=\"discordbot.world\"></i>\n  <i id=\"dbotworld\"></i>\n  <i id=\"dbw\"></i>\n  <a href=\"https://discordbot.world\"><h1>Discord Bot World</h1></a>\n\nKeys: `discordbotworld`, `discordbot.world`, `dbotworld`, `dbw`  \nClass: [dbots.DiscordBotWorld](/#/docs/main/master/class/DiscordBotWorld)  \nWebsite: https://discordbot.world\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=discord.bots.gg\" alt=\"discordbotsgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordbotsgg\"></i>\n  <i id=\"discord.bots.gg\"></i>\n  <i id=\"botsgg\"></i>\n  <i id=\"bots.gg\"></i>\n  <i id=\"dbots\"></i>\n  <a href=\"https://discord.bots.gg\"><h1>Discord Bots</h1></a>\n\nKeys: `discordbotsgg`, `discord.bots.gg`, `botsgg`, `bots.gg`, `dbots`  \nClass: [dbots.DiscordBotsGG](/#/docs/main/master/class/DiscordBotsGG)  \nWebsite: https://discord.bots.gg\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/4KjWg91.png\" alt=\"discordextremelist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"discordextremelist\"></i>\n  <i id=\"discordextremelist.xyz\"></i>\n  <i id=\"discordextremelistxyz\"></i>\n  <i id=\"del\"></i>\n  <a href=\"https://discordextremelist.xyz/\"><h1>Discord Extreme List</h1></a>\n\nKeys: `discordextremelist`, `discordextremelist.xyz`, `discordextremelistxyz`, `del`  \nClass: [dbots.DiscordExtremeList](/#/docs/main/master/class/DiscordExtremeList)  \nWebsite: https://discordextremelist.xyz/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/8HphUE7.jpg\" alt=\"glennbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"glennbotlist\"></i>\n  <i id=\"glennbotlist.xyz\"></i>\n  <i id=\"glennbotlist.gg\"></i>\n  <i id=\"glenn\"></i>\n  <a href=\"https://glennbotlist.xyz\"><h1>Glenn Bot List</h1></a>\n\nKeys: `glennbotlist`, `glennbotlist.xyz`, `glennbotlist.gg`, `glenn`  \nClass: [dbots.GlennBotList](/#/docs/main/master/class/GlennBotList)  \nWebsite: https://glennbotlist.xyz\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.olsh.me/icon?size=1..100..500&url=lbots.org\" alt=\"lbots logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"lbots\"></i>\n  <i id=\"lbotsorg\"></i>\n  <i id=\"lbots.org\"></i>\n  <a href=\"https://lbots.org/\"><h1>LBots</h1></a>\n\nKeys: `lbots`, `lbotsorg`, `lbots.org`  \nClass: [dbots.LBots](/#/docs/main/master/class/LBots)  \nWebsite: https://lbots.org/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/5Vm5J7i.png\" alt=\"listmybots logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"listmybots\"></i>\n  <i id=\"listmybots.com\"></i>\n  <i id=\"listmybotscom\"></i>\n  <i id=\"lmb\"></i>\n  <a href=\"https://listmybots.com/\"><h1>List My Bots</h1></a>\n\nKeys: `listmybots`, `listmybots.com`, `listmybotscom`, `lmb`  \nClass: [dbots.ListMyBots](/#/docs/main/master/class/ListMyBots)  \nWebsite: https://listmybots.com/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/2PGqLVM.png\" alt=\"mythicalbots logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"mythicalbots\"></i>\n  <i id=\"mythicalbots.xyz\"></i>\n  <i id=\"mythicalbotsxyz\"></i>\n  <i id=\"mythical\"></i>\n  <a href=\"https://mythicalbots.xyz/\"><h1>Mythical Bots</h1></a>\n\nKeys: `mythicalbots`, `mythicalbots.xyz`, `mythicalbotsxyz`, `mythical`  \nClass: [dbots.MythicalBots](/#/docs/main/master/class/MythicalBots)  \nWebsite: https://mythicalbots.xyz/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/334CtqK.jpg\" alt=\"spacebotslist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"spacebotslist\"></i>\n  <i id=\"spacebotlist\"></i>\n  <i id=\"spacebots\"></i>\n  <i id=\"space-bot-list.org\"></i>\n  <i id=\"space\"></i>\n  <i id=\"sbl\"></i>\n  <a href=\"https://space-bot-list.org/\"><h1>Space Bots List</h1></a>\n\nKeys: `spacebotslist`, `spacebotlist`, `spacebots`, `space-bot-list.org`, `space`, `sbl`  \nClass: [dbots.SpaceBotsList](/#/docs/main/master/class/SpaceBotsList)  \nWebsite: https://space-bot-list.org/\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://top.gg/images/dblnew.png\" alt=\"topgg logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"topgg\"></i>\n  <i id=\"top.gg\"></i>\n  <i id=\"top\"></i>\n  <a href=\"https://top.gg\"><h1>Top.gg</h1></a>\n\nKeys: `topgg`, `top.gg`, `top`  \nClass: [dbots.TopGG](/#/docs/main/master/class/TopGG)  \nWebsite: https://top.gg\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://get.snaz.in/8Jk3EJg.png\" alt=\"wonderbotlist logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"wonderbotlist\"></i>\n  <i id=\"wonderbotlist.com\"></i>\n  <i id=\"wonderbotlistcom\"></i>\n  <i id=\"wonder\"></i>\n  <i id=\"wbl\"></i>\n  <a href=\"https://wonderbotlist.com/en\"><h1>Wonder Bot List</h1></a>\n\nKeys: `wonderbotlist`, `wonderbotlist.com`, `wonderbotlistcom`, `wonder`, `wbl`  \nClass: [dbots.WonderBotList](/#/docs/main/master/class/WonderBotList)  \nWebsite: https://wonderbotlist.com/en\n</div>\n\n<div align=center>\n  <p>\n    <img src=\"https://i.imgur.com/OFiMern.png\" alt=\"yabl logo\" width=\"100\" align=\"left\" />\n  </p>\n  <i id=\"yabl\"></i>\n  <i id=\"yablxyz\"></i>\n  <i id=\"yabl.xyz\"></i>\n  <a href=\"https://yabl.xyz/\"><h1>Yet Another Bot List</h1></a>\n\nKeys: `yabl`, `yablxyz`, `yabl.xyz`  \nClass: [dbots.YABL](/#/docs/main/master/class/YABL)  \nWebsite: https://yabl.xyz/\n</div>","path":"docs/general/services.md"}}}},"classes":[{"name":"ClientFiller","description":"A class that gets certain values from a client.","access":"private","construct":{"name":"ClientFiller","params":[{"name":"client","description":"The client that will be used","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that will be used for the filler.","access":"private","type":[[["Object"]]],"meta":{"line":16,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":70,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":110,"file":"ClientFiller.js","path":"src/Interface"}}],"methods":[{"name":"get","description":"Gets a client filler from a library.","scope":"static","access":"private","params":[{"name":"libraryName","description":"The name of the library to get","type":[[["string"]]]},{"name":"client","description":"The client that the library made","type":[[["Object"]]]}],"returns":[[["ClientFiller"]]],"meta":{"line":26,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":10,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"Discordie","description":"Represents the client filler for discordie clients.","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler.","access":"private","type":[[["Object"]]],"meta":{"line":16,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":70,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":110,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"Discordie.js","path":"src/Interface/Clients"}},{"name":"DiscordIO","description":"Represents the client filler for discord.io clients.","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler.","access":"private","type":[[["Object"]]],"meta":{"line":16,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":70,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":110,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"DiscordIO.js","path":"src/Interface/Clients"}},{"name":"DiscordJS","description":"Represents the client filler for discord.js clients.","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"client","description":"The client that will be used for the filler.","access":"private","type":[[["Object"]]],"meta":{"line":16,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":70,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"shard","description":"Gets the shard of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["Shard"]]],"meta":{"line":110,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"DiscordJS.js","path":"src/Interface/Clients"}},{"name":"Eris","description":"Represents the client filler for Eris clients.","extends":[[["ClientFiller"]]],"access":"private","props":[{"name":"shard","description":"This client does not natively support sharding.","access":"private","readonly":true,"type":[[["null"]]],"meta":{"line":37,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"client","description":"The client that will be used for the filler.","access":"private","type":[[["Object"]]],"meta":{"line":16,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"userCount","description":"Gets the amount of users the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":70,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"serverCount","description":"Gets the amount of servers the bot has cached.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"voiceConnections","description":"Gets the amount of voice connectinos the bot is using.","access":"private","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"ClientFiller.js","path":"src/Interface"}},{"name":"clientID","description":"Gets the client ID (technically the user ID) of the bot.","access":"private","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"ClientFiller.js","path":"src/Interface"}}],"meta":{"line":9,"file":"Eris.js","path":"src/Interface/Clients"}},{"name":"Arcane","description":"Represents the Arcane Bot Center service.","see":["https://arcane-botcenter.xyz/documentation"],"extends":[[["ServiceBase"]]],"construct":{"name":"Arcane","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.userCount","description":"The amount of users that the client cached","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":43,"file":"Arcane.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"Arcane.js","path":"src/Interface/Lists"}},{"name":"BotListSpace","description":"Represents the botlist.space service.","see":["https://docs.botlist.space/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotListSpace","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":54,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":62,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":71,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":80,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getBotUptime","description":"Gets the uptime of a bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":94,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":103,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":112,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"style","description":"The style of the widget, cannot be zero","optional":true,"default":1,"type":[[["CountResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":123,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"BotListSpace.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"BotListSpace.js","path":"src/Interface/Lists"}},{"name":"BotsForDiscord","description":"Represents the Bots For Discord service.","see":["https://docs.botsfordiscord.com/"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsForDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":55,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":73,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":82,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":92,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"BotsForDiscord.js","path":"src/Interface/Lists"}},{"name":"BotsOfDiscord","description":"Represents the Bots Of Discord service.","extends":[[["ServiceBase"]]],"construct":{"name":"BotsOfDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBotStats","description":"Gets the bot's stats on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":57,"file":"BotsOfDiscord.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":66,"file":"BotsOfDiscord.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":74,"file":"BotsOfDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request (this automatically determines what client its posting for)","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":40,"file":"BotsOfDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"BotsOfDiscord.js","path":"src/Interface/Lists"}},{"name":"BotsOnDiscord","description":"Represents the Bots On Discord service.","see":["https://bots.ondiscord.xyz/info/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"BotsOnDiscord","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"checkReview","description":"Checks whether or not a user has reviewed a bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userId","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":56,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":72,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"BotsOnDiscord.js","path":"src/Interface/Lists"}},{"name":"Carbon","description":"Represents the Carbonitex service.","extends":[[["ServiceBase"]]],"construct":{"name":"Carbon","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":52,"file":"Carbon.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request (this automatically determines what client its posting for)","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":40,"file":"Carbon.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"Carbon.js","path":"src/Interface/Lists"}},{"name":"DBLista","description":"Represents the DBLista service.","see":["https://docs.dblista.pl/"],"extends":[[["ServiceBase"]]],"construct":{"name":"DBLista","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"addBot","description":"Adds a bot to the service.","params":[{"name":"data","description":"The data being posted. This should include the ID of the bot","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":48,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"updateBot","description":"Updates the bot's listing with the data provided.","params":[{"name":"data","description":"The data being posted. This should include the ID of the bot","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":80,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","params":[{"name":"page","description":"The page you want to get","optional":true,"default":0,"type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":89,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"getUnverifiedBots","description":"Gets a list of unverified bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":97,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"getRejectedBots","description":"Gets a list of rejected bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":105,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"rateBot","description":"Adds a rating to a bot on the service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"data","description":"The data being posted","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":115,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"removeRating","description":"Removes a rating from a bot on the service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":131,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"removeBot","description":"Removes a bot from the service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":146,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"search","description":"Searches for bots on the service.","params":[{"name":"query","description":"The query to search for","type":[[["string"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":161,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"This service does not support posting.\nThe promise returned will be rejected with an error.","scope":"static","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":39,"file":"DBLista.js","path":"src/Interface/Lists"}}],"meta":{"line":13,"file":"DBLista.js","path":"src/Interface/Lists"}},{"name":"DiscordAppsDev","description":"Represents the Discord Apps service.","see":["https://discordapps.dev/en-GB/posts/docs/api-v2/"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordAppsDev","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":54,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getApps","description":"Gets a list of applications on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":62,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getRPCApps","description":"Gets a list of RPC applications on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":70,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":79,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"updateBot","description":"Updates the bot with the data provided.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"data","description":"The data being posted","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":89,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordAppsDev.js","path":"src/Interface/Lists"}},{"name":"DiscordBoats","description":"Represents the Discord Boats service.","see":["https://discord.boats/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBoats","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":55,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Checks whether or not a user has voted for a bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":74,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":87,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"DiscordBoats.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordBoats.js","path":"src/Interface/Lists"}},{"name":"DiscordBotList","description":"Represents the Discord Bot List service.","see":["https://discordbotlist.com/api-docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":67,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.userCount","description":"The amount of users that the client cached","type":[[["CountResolvable"]]]},{"name":"options.voiceConnections","description":"The amount of voice connections the client has","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":44,"file":"DiscordBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordBotList.js","path":"src/Interface/Lists"}},{"name":"DiscordBotsGG","description":"Represents the Discord Bots service.","see":["https://discord.bots.gg/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotsGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"sanitized","description":"Whether to sanitize descriptions","optional":true,"default":false,"type":[[["Boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":61,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","params":[{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":76,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":42,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordBotsGG.js","path":"src/Interface/Lists"}},{"name":"DiscordBotWorld","description":"Represents the Discord Bot World service.","see":["https://discordbot.world/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordBotWorld","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":54,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":63,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":72,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getBotLikes","description":"Gets the list of people who liked this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":95,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordBotWorld.js","path":"src/Interface/Lists"}},{"name":"DiscordExtremeList","description":"Represents the Discord Extreme List service.","see":["https://docs.discordextremelist.xyz/"],"extends":[[["ServiceBase"]]],"construct":{"name":"DiscordExtremeList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":54,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":68,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":82,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":97,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"DiscordExtremeList.js","path":"src/Interface/Lists"}},{"name":"GlennBotList","description":"Represents the Glenn Bot List service.","see":["https://docs.glennbotlist.xyz/"],"extends":[[["ServiceBase"]]],"construct":{"name":"GlennBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":55,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getProfile","description":"Get a user's profile listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":78,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":88,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"GlennBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"GlennBotList.js","path":"src/Interface/Lists"}},{"name":"LBots","description":"Represents the LBots service.","see":["https://lbots.org/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"LBots","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"invalidate","description":"Invalidates the token being used in the request.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":60,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"getBotFavorites","description":"Gets the list of people who favorited this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":74,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"userFavorited","description":"Checks whether or not a user has favorited a bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":89,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"updatePanelGuilds","description":"Updates the guilds on the bot's panel.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"data","description":"The data being posted","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":104,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"getPanelGuildSettings","description":"Gets a guilds settings from the bot's panel.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"guildID","description":"The guild's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":121,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"updatePanelGuildSettings","description":"Gets a guilds settings from the bot's panel.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"guildID","description":"The guild's ID","type":[[["IDResolvable"]]]},{"name":"data","description":"The data being posted","type":[[["Object"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":137,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":42,"file":"LBots.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"LBots.js","path":"src/Interface/Lists"}},{"name":"ListMyBots","description":"Represents the List My Bots service.","extends":[[["ServiceBase"]]],"construct":{"name":"ListMyBots","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getStatistics","description":"Gets the statistics of this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":52,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"getCurrentBot","description":"Gets the bot's info based on the token.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":65,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":79,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":93,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Checks whether or not a user has liked the current bot based on your token on this service.","params":[{"name":"userID","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":107,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request (this automatically determines what client its posting for)","type":[[["string"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":39,"file":"ListMyBots.js","path":"src/Interface/Lists"}}],"meta":{"line":11,"file":"ListMyBots.js","path":"src/Interface/Lists"}},{"name":"MythicalBots","description":"Represents the Mythical Bots service.","see":["https://docs.mythicalbots.xyz/"],"extends":[[["ServiceBase"]]],"construct":{"name":"MythicalBots","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":55,"file":"MythicalBots.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"MythicalBots.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]}],"returns":[[["string"]]],"meta":{"line":74,"file":"MythicalBots.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"MythicalBots.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"MythicalBots.js","path":"src/Interface/Lists"}},{"name":"SpaceBotsList","description":"Represents the Space Bots List service.","see":["https://spacebots.gitbook.io/tutorial-en/"],"extends":[[["ServiceBase"]]],"construct":{"name":"SpaceBotsList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":57,"file":"SpaceBotsList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.userCount","description":"The amount of users that the client cached","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":42,"file":"SpaceBotsList.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"SpaceBotsList.js","path":"src/Interface/Lists"}},{"name":"TopGG","description":"Represents the Top.gg service.","see":["https://top.gg/api/docs"],"extends":[[["ServiceBase"]]],"construct":{"name":"TopGG","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":60,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets the list of bots on this service.","params":[{"name":"query","description":"The query string that will be used in the request","type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":69,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":78,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotStats","description":"Gets the bot's stats listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":87,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getBotVotes","description":"Gets the list of people who voted this bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":97,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"userVoted","description":"Checks whether or not a user has voted for a bot on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"userID","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":107,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"getWidgetURL","description":"Gets the widget URL for this bot.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]},{"name":"query","description":"The query string that will be used in the request","optional":true,"type":[[["Query"]]]},{"name":"smallWidget","description":"The sub-path name to turn the widget into a badge (i.e. owner)","optional":true,"default":null,"type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":121,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":42,"file":"TopGG.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"TopGG.js","path":"src/Interface/Lists"}},{"name":"WonderBotList","description":"Represents the Wonder Bot List service.","see":["https://api.wonderbotlist.com/en/"],"extends":[[["ServiceBase"]]],"construct":{"name":"WonderBotList","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":58,"file":"WonderBotList.js","path":"src/Interface/Lists"}},{"name":"getUser","description":"Gets the user listed on this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":72,"file":"WonderBotList.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]},{"name":"options.shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":42,"file":"WonderBotList.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"WonderBotList.js","path":"src/Interface/Lists"}},{"name":"YABL","description":"Represents the YABL service.","see":["https://yabl.xyz/api"],"extends":[[["ServiceBase"]]],"construct":{"name":"YABL","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"invalidate","description":"Invalidates the token being used in the request.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":54,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getBot","description":"Gets the bot listed on this service.","params":[{"name":"id","description":"The bot's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":68,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getRandomBots","description":"Gets 20 random bots from this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":76,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getUserBots","description":"Gets the user's bots listed for this service.","params":[{"name":"id","description":"The user's ID","type":[[["IDResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":85,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getBots","description":"Gets a list of bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":93,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getBotsByPage","description":"Gets a page of bots on this service.","params":[{"name":"query","description":"The query string that will be used in the request","type":[[["Query"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":107,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"getUnverifiedBots","description":"Gets a list of unverified bots on this service.","returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":115,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"_request","description":"Sends a request for the service interface.","access":"private","inherits":"ServiceBase#_request","inherited":true,"params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","inherits":"ServiceBase#_appendQuery","inherited":true,"params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"post","description":"Posts statistics to this service.","scope":"static","params":[{"name":"options","description":"The options of the request","type":[[["Object"]]]},{"name":"options.token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"options.clientID","description":"The client ID that the request will post for","type":[[["IDResolvable"]]]},{"name":"options.serverCount","description":"The amount of servers that the client is in","type":[[["CountResolvable"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":41,"file":"YABL.js","path":"src/Interface/Lists"}}],"meta":{"line":12,"file":"YABL.js","path":"src/Interface/Lists"}},{"name":"Poster","description":"A class that posts server count to listing site(s).","construct":{"name":"Poster","params":[{"name":"options","description":"The options needed to construct the poster","type":[[["PosterOptions"]]]}]},"props":[{"name":"client","description":"The client that will be used to fetch the stats","type":[[["Object"]]],"meta":{"line":22,"file":"Poster.js","path":"src/Interface"}},{"name":"_clientFiller","description":"The client filler used in the poster","access":"private","type":[[["ClientFiller"]],[["null"]]],"meta":{"line":29,"file":"Poster.js","path":"src/Interface"}},{"name":"customServices","description":"An array of custom services that the poster uses","type":[[["Array","<"],["CustomService",">"]]],"meta":{"line":35,"file":"Poster.js","path":"src/Interface"}},{"name":"apiKeys","description":"The API keys that the poster is using","type":[[["Object","<"],["Service",", "],["string",">"]]],"meta":{"line":41,"file":"Poster.js","path":"src/Interface"}},{"name":"options","description":"The options the poster was built with","readonly":true,"type":[[["PosterOptions"]]],"meta":{"line":48,"file":"Poster.js","path":"src/Interface"}},{"name":"handlers","description":"The list of event handlers for every custom event","type":[[["Object","<"],["CustomEvent",", "],["Array","<"],["eventHandler",">>"]]],"meta":{"line":64,"file":"Poster.js","path":"src/Interface"}},{"name":"clientFiller","description":"The client filler used in the poster","access":"private","readonly":true,"nullable":true,"type":[[["ClientFiller"]]],"meta":{"line":74,"file":"Poster.js","path":"src/Interface"}},{"name":"_interval","description":"Interval that posts to all services","access":"private","type":[[["Timeout"]]],"meta":{"line":134,"file":"Poster.js","path":"src/Interface"}}],"methods":[{"name":"getServerCount","description":"Retrieves the current server count of the client/shard.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of servers the client/shard is in"},"meta":{"line":83,"file":"Poster.js","path":"src/Interface"}},{"name":"getUserCount","description":"Retrieves the current user count of the client/shard.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Amount of users the client/shard is connected with"},"meta":{"line":97,"file":"Poster.js","path":"src/Interface"}},{"name":"getVoiceConnections","description":"Retrieves the current voice connection count of the client/shard.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Number of active voice connections"},"meta":{"line":111,"file":"Poster.js","path":"src/Interface"}},{"name":"startInterval","description":"Creates an interval that posts to all services.","params":[{"name":"interval","description":"The time (in ms) to reach to post to all {@link Service}s again","default":1800000,"type":[[["number"]]]}],"returns":{"types":[[["NodeJSTimeout"]]],"description":"The interval that is responsible for posting"},"meta":{"line":126,"file":"Poster.js","path":"src/Interface"}},{"name":"stopInterval","description":"Destroys the current interval.","meta":{"line":144,"file":"Poster.js","path":"src/Interface"}},{"name":"getService","description":"Gets a service, autofilling its API key if the poster has it.","params":[{"name":"service","description":"The service to get","type":[[["Service"]]]}],"returns":[[["ServiceBase"]],[["CustomService"]]],"meta":{"line":153,"file":"Poster.js","path":"src/Interface"}},{"name":"post","description":"Posts the current clients server count to a service.","see":["Poster#postManual"],"params":[{"name":"service","description":"The service to post to","optional":true,"type":[[["Service"]],[["all","\""]]]}],"returns":{"types":[[["Promise","<("],["Object","|"],["Array","<"],["Object",">)>"]]],"description":"The result(s) of the post"},"meta":{"line":168,"file":"Poster.js","path":"src/Interface"}},{"name":"postManual","description":"Manually posts a server count to a service.","params":[{"name":"service","description":"The service to post to","type":[[["Service"]],[["all","\""]]]},{"name":"counts","description":"An object containing the tallies of servers, users and voice connections","type":[[["Object"]]]},{"name":"counts.serverCount","description":"The server count to post to the service","type":[[["number"]]]},{"name":"counts.userCount","description":"The user count to post to the service","optional":true,"type":[[["number"]]]},{"name":"counts.voiceConnections","description":"The voice connection count to post to the service","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<("],["Object","|"],["Array","<"],["Object",">)>"]]],"description":"The result(s) of the post"},"meta":{"line":188,"file":"Poster.js","path":"src/Interface"}},{"name":"addHandler","description":"Adds an handler for an event.","params":[{"name":"event","description":"The name of the event to add the handler to","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["eventHandler"]]]}],"returns":{"types":[[["Array","<"],["eventHandler",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":249,"file":"Poster.js","path":"src/Interface"}},{"name":"removeHandler","description":"Removes an handler for an event.","params":[{"name":"event","description":"The name of the event to remove the handler from","type":[[["CustomEvent"]]]},{"name":"handler","description":"The function that is run with the event","type":[[["eventHandler"]]]}],"returns":{"types":[[["Array","<"],["eventHandler",">"]]],"description":"The array of handlers currently set for that event"},"meta":{"line":263,"file":"Poster.js","path":"src/Interface"}},{"name":"runHandlers","description":"Manually triggers an event with custom arguments.","params":[{"name":"event","description":"The name of the event to run the handlers for","type":[[["CustomEvent"]]]},{"name":"args","description":"The arguments to pass to the handlers","variable":true,"type":[[["any"]]]}],"meta":{"line":278,"file":"Poster.js","path":"src/Interface"}}],"events":[{"name":"autopost","description":"Emitted when the interval has ran.","params":[{"name":"result","description":"The result(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":85,"file":"Constants.js","path":"src/Utils"}},{"name":"autopostfail","description":"Emitted when the interval failed to post.","params":[{"name":"result","description":"The error(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":90,"file":"Constants.js","path":"src/Utils"}},{"name":"post","description":"Emitted when a post succeeds.","params":[{"name":"result","description":"The result of the post","type":[[["Object"]]]}],"meta":{"line":95,"file":"Constants.js","path":"src/Utils"}},{"name":"postfail","description":"Emitted when a post fails.","params":[{"name":"result","description":"The error of the post","type":[[["Object"]]]}],"meta":{"line":100,"file":"Constants.js","path":"src/Utils"}}],"meta":{"line":14,"file":"Poster.js","path":"src/Interface"}},{"name":"ServiceBase","description":"Represents a basic service.","construct":{"name":"ServiceBase","params":[{"name":"token","description":"The token/key for the service","type":[[["string"]]]}]},"props":[{"name":"token","description":"The token that will be used for the service.","access":"private","type":[[["string"]]],"meta":{"line":18,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"baseURL","description":"The base URL of the service's API.","scope":"static","readonly":true,"type":[[["string"]]],"meta":{"line":26,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"aliases","description":"The values that can be used to select the service.","scope":"static","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":108,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"logoURL","description":"The logo URL, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":118,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"name","description":"Service's name, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":128,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"websiteURL","description":"The website URL, used only for documentation.","scope":"static","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":138,"file":"ServiceBase.js","path":"src/Interface"}}],"methods":[{"name":"_request","description":"Sends a request for the service interface.","access":"private","params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"options","description":"The options of this request","type":[[["Object"]]]},{"name":"options.requiresToken","description":"Whether the request requires a token","optional":true,"type":[[["boolean"]]]},{"name":"options.appendBaseURL","description":"Whether to prepend the service's base API url","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":81,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_appendQuery","description":"Appends query string to a URL.","access":"private","params":[{"name":"url","description":"The URL to modify","type":[[["string"]]]},{"name":"query","description":"The query to append","type":[[["Query"]]]},{"name":"appendBaseURL","description":"Whether to prepend the service's base API url","default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["string"]]],"description":"The modified URL"},"meta":{"line":97,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"get","description":"Gets a service from a key.","scope":"static","params":[{"name":"key","description":"The name of the service to get","type":[[["string"]]]},{"name":"extras","description":"An array of {@link CustomService}s to include","type":[[["Array","<"],["CustomService",">"]]]}],"returns":{"types":[[["ServiceBase"]]],"nullable":true},"meta":{"line":36,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"_post","description":"Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.","scope":"static","access":"private","params":[{"name":"form","description":"The request form","type":[[["Object"]]]},{"name":"appendBaseURL","description":"Whether to append the service's base API url","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["AxiosResponse",">"]]],"meta":{"line":64,"file":"ServiceBase.js","path":"src/Interface"}}],"meta":{"line":12,"file":"ServiceBase.js","path":"src/Interface"}},{"name":"DBotsError","description":"Extend an error of some sort into a DBotsError.","extends":[[["Error"]]],"access":"private","construct":{"name":"DBotsError","params":[{"name":"key","description":"Error key","type":[[["string"]]]},{"name":"args","description":"Arguments to pass for util format or as function args","type":[[["Array","<"],["any",">"]]]}]},"props":[{"name":"name","type":[[["string"]]],"meta":{"line":22,"file":"DBotsError.js","path":"src/Utils"}},{"name":"code","type":[[["string"]]],"meta":{"line":26,"file":"DBotsError.js","path":"src/Utils"}}],"meta":{"line":17,"file":"DBotsError.js","path":"src/Utils"}},{"name":"Util","description":"Contains various general-purpose utility methods.","methods":[{"name":"resolveID","description":"Resolves data into a Discord ID.","scope":"static","params":[{"name":"data","description":"The data to resolve","type":[[["IDResolvable"]]]}],"meta":{"line":23,"file":"Util.js","path":"src/Utils"}},{"name":"resolveCount","description":"Resolves data into a countable number that is finite and positive.","scope":"static","params":[{"name":"data","description":"The data to resolve","type":[[["CountResolvable"]]]}],"meta":{"line":53,"file":"Util.js","path":"src/Utils"}}],"meta":{"line":7,"file":"Util.js","path":"src/Utils"}}],"interfaces":[],"typedefs":[{"name":"PosterOptions","description":"Options for a poster.","type":[[["Object"]]],"props":[{"name":"apiKeys","description":"An object that pairs a {@link Service} with their token","optional":true,"type":[[["Object","<"],["Service",", "],["string",">"]]]},{"name":"client","description":"The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present","optional":true,"type":[[["Object"]]]},{"name":"clientID","description":"The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present","optional":true,"type":[[["string"]]]},{"name":"clientLibrary","description":"The library that the client is based on","optional":true,"type":[[["Library"]]]},{"name":"post","description":"The function to use when posting to a server that uses the client ID,\nthe amount of servers, and a {@link Shard}. This will be used when the {@link Service} is `custom`","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"shard","description":"The shard data for using different methods of posting to services","optional":true,"type":[[["Shard"]]]},{"name":"serverCount","description":"The function to use when retrieving the amount of servers a client/shard is in, using the client as a parameter","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"userCount","description":"The function to use when retrieving the amount of users a client/shard is connected with, using the client as a parameter","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"voiceConnections","description":"The function to use when retrieving the number of active voice connections, using the client as a parameter","optional":true,"type":[[["PromiseResolvable"]]]},{"name":"customServices","description":"The custom services that the poster will use","optional":true,"type":[[["Array","<"],["CustomService",">"]]]},{"name":"useSharding","description":"Whether or not to use a {@link ServiceBase}s sharding method when posting","optional":true,"default":true,"type":[[["number"]]]}],"meta":{"line":1,"file":"Constants.js","path":"src/Utils"}},{"name":"Shard","description":"A shard that is used when posting to services.","type":[[["Object"]]],"props":[{"name":"count","description":"The amount of shards the client uses","optional":true,"type":[[["number"]]]},{"name":"id","description":"The shard ID that is being used by the poster","optional":true,"type":[[["number"]]]}],"meta":{"line":20,"file":"Constants.js","path":"src/Utils"}},{"name":"PostRequestData","description":"The object that is given to {@link ServiceBase}s and {@link CustomService}s in order to send requests to them.","type":[[["Object"]]],"params":[{"name":"token","description":"The Authorization token for the request","type":[[["string"]]]},{"name":"clientID","description":"The client ID that the request will post for","type":[[["string"]]]},{"name":"serverCount","description":"The amount of servers that the client is in","type":[[["number"]]]},{"name":"userCount","description":"The amount of users that the client cached","type":[[["number"]]]},{"name":"voiceConnections","description":"The amount of voice connections the client has","type":[[["number"]]]},{"name":"shard","description":"The shard the request is representing","type":[[["Shard"]]]}],"meta":{"line":27,"file":"Constants.js","path":"src/Utils"}},{"name":"Query","description":"An object with all query parameters","type":[[["Object","<"],["string",", ("],["string","|"],["number",")>"]]],"meta":{"line":38,"file":"Constants.js","path":"src/Utils"}},{"name":"CustomService","description":"A mock of a {@link Service} that only consists of the nessessities for a poster to use it.","type":[[["Object"]]],"props":[{"name":"aliases","description":"The keys that this service can get called from","type":[[["Array","<"],["string",">"]]]},{"name":"post","description":"The function that sends a request with the parameter being a {@link PostRequestData}.\nMust return an axios Response object (use [`dbots.FormatRequest`](https://github.com/dbots-pkg/dbots.js/blob/master/src/Utils/FormatRequest.js#L14)).","type":[[["function"]]]}],"meta":{"line":43,"file":"Constants.js","path":"src/Utils"}},{"name":"Service","description":"A {@link ServiceBase} key supported by the package.\nThis can also includes keys from {@link CustomService}s and can be `custom` if a {@link Poster} has a custom post function.","see":["{@link https://dbots.js.org/#/docs/main/master/general/services}"],"type":[[["string"]]],"meta":{"line":51,"file":"Constants.js","path":"src/Utils"}},{"name":"Library","description":"A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris","type":[[["string"]]],"meta":{"line":62,"file":"Constants.js","path":"src/Utils"}},{"name":"eventHandler","description":"Type of function to set for handlers","type":[[["function"]]],"params":[{"name":"result","description":"The result(s) of the post","type":[[["Object"]],[["Array","<"],["Object",">"]]]}],"meta":{"line":71,"file":"Constants.js","path":"src/Utils"}},{"name":"CustomEvent","description":"An event that can be added an handler for. These are the available events:\n* autopost\n* autopostfail\n* post\n* postfail","type":[[["string"]]],"meta":{"line":77,"file":"Constants.js","path":"src/Utils"}},{"name":"stringCallback","type":[[["function"]]],"returns":[[["string"]]],"meta":{"line":1,"file":"EnsurePromise.js","path":"src/Utils"}},{"name":"PromiseResolvable","description":"Data that can be resolved to give a string. This can either be a Function or a Promise.","type":[[["stringCallback"]],[["eventHandler"]],[["Promise","<"],["string",">"]]],"meta":{"line":6,"file":"EnsurePromise.js","path":"src/Utils"}},{"name":"AxiosResponse","see":["{@link https://github.com/axios/axios#response-schema}"],"type":[[["Object","<"],["string",", "],["any",">"]]],"meta":{"line":13,"file":"FormatRequest.js","path":"src/Utils"}},{"name":"IDResolvable","description":"Data that can be resolved to give a Discord ID, this can be:\n* A string\n* A number\n* Any value with an `id` key","type":[[["string"]],[["number"]],[["Object","<\""],["id","\", "],["string",">"]]],"meta":{"line":11,"file":"Util.js","path":"src/Utils"}},{"name":"CountResolvable","description":"Data that can be resolved to give a finite and positive integer.\nThis can include any value that can be parsed into an integer.","type":[["*"]],"meta":{"line":43,"file":"Util.js","path":"src/Utils"}}],"externals":[]}